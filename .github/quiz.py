# GitHub
# 1.1. Что такое GitHub?
# GitHub — это крупнейшее хранилище Git репозиториев, а так же центр сотрудничества для
# миллионов разработчиков и проектов. Огромный процент всех репозиториев хранится на
# GitHub, а многие проекты с открытым исходным кодом используют его ради Git хостинга,
# баг-трекера, рецензирования кода и других вещей. Так что, пока всё это не часть открытого
# Git проекта, наверняка вы захотите, или вам придётся взаимодействовать с GitHub при
# профессиональном использовании Git.
#
# 1.2. Как GitHub связан с Git?
# GitHub — это крупнейший в мире хостинг Git-репозиториев и программного обеспечения с открытым исходным кодом. GitHub берёт то, что делает Git, и добавляет собственный интерфейс, свои функции и социальные возможности… GitHub можно рассматривать как социальную сеть для программистов, построенную вокруг Git
#
# 1.3. Чем отличается fork репозитория от его клонирования (clone)?
# Клонирование (clone) создаёт локальную копию репозитория, которая по умолчанию связана с оригинальным репозиторием. Fork же создаёт копию репозитория на сервере GitHub под вашей учётной записью, и уже её вы можете клонировать. Таким образом, форк — это копия на стороне GitHub, а клон — ваша локальная копия
#
# 1.4. Зачем нужны и как работают pull requests?
# Pull Request — это запрос на включение ваших изменений в основной проект. Вы публикуете ветку в своём форке и через веб-интерфейс GitHub создаёте Pull Request, чтобы попросить авторов проекта просмотреть ваши изменения и при необходимости объединить их с основной веткой.
#
# 1.5. GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к вашей учётной записи?
# GitHub сопоставляет e-mail адреса в ваших коммитах с e-mail адресами, указанными в настройках вашей учётной записи. Именно так GitHub определяет, что коммит принадлежит именно вам
#
# 1.6 Какая команда генерирует SSH ключ для Доступа по SSH к репозиторию (Рисунок 83)
# $ ssh-keygen -t rsa -C "youremail@example.com"
# ```»:contentReference[oaicite:4]{index=4}
#
# Внесение собственного вклада в проекты
#
# Создайте ишьюс и запомните его номер, в https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/issues, назовите его "UPDATE README", в дескрипшене добавьте список задач (Рисунок 102)
#
# Issue #407 https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/issues/407#issue-3451896805
#
# 2.1. Если вы хотите вносить свой вклад в уже существующие проекты, в которых у нас нет прав на внесения изменений путём отправки (push) изменений, вы можете создать своё собственное ответвление, что нужно сделать чтобы создать собственное ответвление? (Рисунок 88), сделайте ответвление https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV, и вставьте сюда ссылку на ваше ответвление
#
# https://github.com/hightechandfood-lgtm/Data-Science-For-Beginners-from-scratch-SENATOROV
#
#
# 2.2 создайте ветку dev в ФОРКЕ Data-Science-For-Beginners, вставьте сюда ссылку на вашу ветку dev
# https://github.com/hightechandfood-lgtm/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev
#
# 2.3 В README файле вашего ФОРКА, добавьте ссылку на мой телеграм канал https://t.me/RuslanSenatorov, сохраните коммит, название коммита - в тайтле название ишьюса (#номер_ишьюс), в дескрипшене - Closes #NUMBER-ISSUES номер возьмите из пункта 2
# done
#
# 2.4 Отправьте пул реквест из ФОРКА в основу В ВАШУ ВЕТКУ, тайтл пул реквеста скопируйте из ISSUES-TITLE, в дескрипшине пул реквеста напишите Closes #NUMBER-ISSUES вставьте номер из пункта 2
# Done
#
# 2.5 Прокомментириуйте ваш пул реквест перед слиянием, перейдите во вкладку(Рисунок 92) и напишите "ок", потом нажимайте сабмит ревью затем не выходя из этой вкладки, в файле README , добавьте туда ссылку на https://t.me/SENATOROVAI,
# => инструкция
#
# 2.6 Выполните Merge pull request (Рисунок 116), вставьте сюда ссылку на ваш пул реквест
#
# https://github.com/hightechandfood-lgtm/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/1
#
#
# 2.7 Вставьте сюда ссылку на закрытые пул реквесты в репозитории, найти можно тут
# https://github.com/hightechandfood-lgtm/Data-Science-For-Beginners-from-scratch-SENATOROV/pulls?q=is%3Apr+is%3Aclosed
#
#
# 2.8 Как посмотреть какие файлы были в репозитории на момент определенного коммита? вставьте сюда ссылку на любой коммит, где взять ссылку? подсказка:
# Выбираем любой коммит в ВАШЕЙ ВЕТКЕ
# Нажимаем на Browse
# Убедитесь что слева у вас написан номер коммита, потом смотрим какие файлы были в репозитории, на момент этого коммита, это очень полезно если вы накосячили, и хотите откатиться к этому коммиту.
# Поэтому крайне важно называть коммиты ПРАВИЛЬНО, и в коммите должны быть только те файлы которые соответствуют названию коммита, лишних файлов НЕ ДОЛЖНО БЫТЬ, в одном коммите отправлять НЕСКОЛЬКО файлов не надо!
# Как должна выглядеть ссылка
#
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/7dc440351e3e381ab4bcffd57521595be4bf7832
#
# 2.9 как открыть запрос слияния, указывающий на другой запрос слияния и зачем это нужно? (Рисунок 117)
#
# 1) Запушить свою ветку с правками.
# 2) На странице Open a pull request нажимаем Edit справа от селекторов веток.
# В выпавших полях выбираем форк и ветку того PR, в который вливаемсч, как base, а свою ветку — как compare. Открываем PR.
#
# Это нужно если хочется предложить улучшения в чей-то PR , нонет прав записи в его ветку, тогда открываем свой PR в его PR-ветку. Так автор сможет принять твои правки поверх своего PR.
#
#
# 3 Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой проект.
# 1)Сделать форк проекта.
# 2)Создать тематическую ветку от базовой (в книге — master, у тебя это может быть dev).
# 3)Сделать коммиты с изменениями.
# 4)Запушить ветку в свой форк на GitHub.
# 5)Открыть Pull Request.
# 6) Обсуждать и вносить правки по замечаниям.
# 7) Мейнтейнер решает — принять или отклонить.
# 8) После мерджа обновить базовую ветку у себя и запушить её в форк. (В книге — master; у тебя — dev.)
#
# 3.1.
#
# Какие практики принято соблюдать при создании Pull Request чтобы закрыть автоматический issues?
# 1) Использовать ключевые слова в описании PR:
# -Сloses #ISSUE
# -Fixes #ISSUE
# -Resolves #ISSUE
# Эти слова связывают PR с задачей. Когда PR вольётся в основную ветку, связанный issue закроется автоматически
#
# 2) Чёткий заголовок и описание
# В заголовке отражают суть изменений, а в теле PR — что исправлено/добавлено и какая задача закрывается.
# 3) Соответствие истории коммитов
# Рекомендуется делать PR из осмысленных коммитов, чтобы было понятно, как именно решена задача.
#
#
# Какие практики принято соблюдать при создании commit чтобы закрыть автоматический issues?
# 1) Указывать ключевые слова прямо в сообщении коммита
# Если коммит попадает в main (или другую default branch), то issue закроется при наличии:
# -Сloses #ISSUE
# -Fixes #ISSUE
# -Resolves #ISSUE
# Например:
# fix: исправлено отображение кнопки при загрузке страницы
# Closes #ISSUE
#
# 2) Придерживаться Conventional Commits
# Используются типы feat, fix, docs, refactor, чтобы облегчить понимание истории.
#
# 3) Краткий заголовок, развёрнутое описание
# Заголовок: до 50 символов.
# В теле: детали исправления, причины, ссылки на issue.
#
#
#
# 3.2 Как отклонить/закрыть пул реквест? (предоставьте скриншот где это в гитхабе)
# ![image.png](attachment:image.png)
#  Кнопка Close pull request
#
# 3.3 Перед отправкой пул реквеста нужно ли создавать ишьюс?
# Вообще не обязательно, но принято сначала создать issue, а потом сослаться на него в PR (сCloses #issue)
#
# 3.4 В какой вкладке можно посмотреть список изменений который был в пул реквесте? (Рисунок 92)
# Во вкладке Files changed
#
# 3.5 В какой вкладке находится страница обсуждений пул реквеста? (Рисунок 94)
# Во вкладке Conversation
#
# Создание запроса на слияние
# 4 Можно ли открыть пул реквест, если вы ничего не вносили в FORK?
# Нет, нельзя
#
# 4.1 Что нужно сделать чтобы открыть пул реквест? (Рисунок 90)
# 1) создать «Fork»
# 2) Клонируем нашу копию
# 3) Создаём тематическую ветку
# 4) Вносим свои изменения
# 5) Проверяем изменения
# 6) Фиксируем изменения в тематической ветку
# 7) Отправляем новую ветку в нашу копию на GitHub
# 8) Заходим на страничку нашей копии на GitHub, видим, что GitHub заметил наши изменения и предлагает открыть запрос на слияние с помощью большой зелёной кнопки "Compare & pull request".
# 9) Вводим заголовок и описание предлагаемых изменений на рассмотрение владельцу проекта и нажимаем Create pull request
#
# 4.2 Что нужно сделать Если ваш Форк устарел?
# нужно изменить его, чтобы его можно было бы просто слить. GitHub проверит это за вас и под каждым из запросов на слияние отобразит уведомление, можно ли его слить без конфликтов или нет.
#
# 4.3 Что нужно сделать если в пул реквесте имеются конфликты слияния (Рисунок 96)
# Нужно изменить свою ветку так, чтобы исключить конфликты. 2 способа это сделать:
# 1) либо перебазировать свою ветку относительно целевой ветки (обычно, относительно main ветки исходного репозитория),
# 2) слить целевую ветку в свою.
#
# Отрывки кода
# 5 Что нужно сделать Для добавления отрывка кода в комментарии к ишьюсу? (Рисунок 104)
# Для добавления отрывка кода следует обрамить его обратными кавычками.
#
# 5.1 На какую клавишу нажать клавишу чтобы выделенный текст был включён как цитата в ваш комментарий?(Рисунок 105)
# можно цитировать текст перед ним нужно поставить символ >.
# Еще можнно выделить текст, который хочется процитировать, и нажать клавишу r.
#
# 5.2 Как вставить картинку в ишьюс? (Рисунок 108)
# Можно перенести картинку в комментарий, либо в самой подсказке от гита во время комментирования нажать на select items
#
# Поддержание GitHub репозитория в актуальном состоянии
# 6 Как понять что ваш форк устарел?
# GitHub информирует при помощи сообщения:
# This branch is 5 commits behind progit:master.
#
# 6.1 Как обновить форк?
# 1) Если вы находитесь на другой ветке — перейти на main.
# 2) Получить изменения из репозитория https://github.com/progit/progit2.git и слить их с
# веткой main.
# 3) Отправить локальную ветку main в ваш форк origin.
#
# Добавление участников
# 7 Как добавить участников в ваш репозиторий, чтобы команда могла работать над одним репозиторием? (Рисунок 112)
# 1) Перейдите по ссылке «Settings» в нижней части панели справа.
# 2) Затем выберите «Collaborators» в меню слева. Напишите имя пользователя в поле для ввода
# и нажмите кнопку «Add collaborator».
#
# Упоминания и уведомления
# 8 Какой символ нужен для упоминания кого-либо? (Рисунок 118)
# @
# 8.1 Где находится Центр уведомлений, напишите ссылку (Рисунок 121)
# https://github.com/notifications
#
# Особенные файлы
# 9 Что такое и зачем нужен файл README
# Большинство команд используют его для поддержания актуальной информации о проекте
# для новичков. Как правило, он включает следующее:
# • Для чего предназначен проект
# • Инструкции по конфигурации и установке
# • Примеры использования
# • Используемую лицензию
# • Правила участия в проекте
# В этот файл можно встраивать изображения или ссылки для простоты восприятия
# информации.
#
# 9.1 Что такое и зачем нужен файл CONTRIBUTING (Рисунок 122)
# В этом файле можно указать конкретные вещи, которые вы хотите или не хотите видеть в новых запросах на слияние. Таким образом люди могут ознакомится с руководством, перед тем как создавать новый запрос на слияние.
#
# Управление проектом
# 10 Как измененить основную ветку (Рисунок 123)
# В настройках репозитория на закладке «Options», выбрать нужную ветку из выпадающего меню и она станет основной для
# большинства операций, включая извлечение кода при клонировании репозитория.
#
# 10. 1 Как передать проект? какая кнопка? (рисунок 124)
# Transfer
#
# 10.2 Что такое файл .gitignore?
# это специальный текстовый файл в Git-репозитории, в котором перечисляются файлы и каталоги, которые Git не должен отслеживать.
#
#
# ПОЗДРАВЛЯЮ ВЫ ГОТОВЫ К ОПЕНСОРС
#
# 3 ПРИЧИНЫ КОНТРИБЬЮТИТЬ В ОПЕНСОРС:
# Для души - когда хочешь помочь проекту, который считаешь полезным, пусть и не будешь им пользоваться. Сюда относятся в основном мелкие багфиксы.
#
# для карьеры, это случай, когда бы вы(будучи в здравом уме и свободе действий) отобрали у фреймворка звездочку, а не поставили, но принятые коммиты и пул реквесты в этого корпоративного монстра могут благосклонно сказаться на вашем портфолио.
#
# для себя. Когда вы пользуетесь программой с открытым исходным кодом, накладываете одни и те же свои патчи от релиза к релизу, и начинаете подозревать, что этот функционал может пригодиться не только вам.
#
# Прочтите зачем участвовать в ОПЕНСОРС
#
# Поиск проекта, в котором можно поучаствовать
# После того как вы поняли как искать проект для участия, ВЫБЕРИТЕ КОМПАНИЮ ВАШЕЙ МЕЧТЫ, в поиске укажите другую компанию, если это не гугл.
#
# Выберите любой понравившийся репозиторий компании, проанализируйте его, вам нравится этот репозиторий? Если нет, ничего страшного, потом выберите другой проект, а сейчас продолжим дальше
# 3)Создайте ишьюс в выбранном репозитории, назовите его PEP8 WIP в дескрипшен напишите optimization to PEP8
#
# “WIP” (от англ. Work in Progress — в процессе выполнения). Всегда позже можно отправить дополнительные коммиты.
#
# Сделайте форк репозитория и в качестве первого улучшения, прогоните репозиторий на линтеры, сохраните коммите согласно регламента привязав коммит к ишьюсу а затем отправьте пул реквест привязав его к ишьюсу.
#
# Вставьте в комменты к этому ишьюсу ссылку на ваш пул реквест
#
# Вы ДОЛЖНЫ сделать ВТОРОЕ улучшение репозитория, выберите из списка, что вы хотели бы улучшить: список возможных улучшений, напишите сюда в комменты какое второе улучшение вы выбрали
# Подсказка:
# Можно просмотреть файл README, чтобы найти неработающую ссылку или опечатку.
# По статистике: 28% случайных вкладов в опенсорс представляют собой документацию, например, исправление опечатки, переформатирование или перевод.
#
# Отправьте второй коммит, со вторым улучшением, потом откройте пул реквест, или используйте существующий, если он открыт.
#
# Ждите МЕРЖ вашего пул реквеста, затем можете смело называть себя КОНТРИБЬЮТЕРОМ, если ваш вклад был существенным, вас возьмут на работу без резьюме и портфолио. Но в любом случае, в резюме мы добавим ссылку на ваш пул реквест.
#
# Обязательно законтребьютьте сюда, шанс 100%
# https://github.com/firstcontributions/first-contributions/blob/main/README.md
#
#
#

#

#
