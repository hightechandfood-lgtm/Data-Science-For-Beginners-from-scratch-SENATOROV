# Quiz 1
#
# 1) Как понять, что домашка пришла? (00:00 - 00:16)
# Заходим в чат HOMEWORK, где видим Ник и прими pull, если видим свой ник и прими пул, то домашка пришла.
#
# 2) Как принять домашку? (00:16 - 0:34)
# Заходим в githubdesktop, нажимаем Pull origin,
# в history видим коммиты. самый верхний - самый свежий коммит. Заходим в него и смотрим, что произошло.
#
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит? (00:34 -0:43 )
# В History смотрим историю коммитов, самый верхний - самый свежий коммит. В остальные тоже можно смотреть, чтобы почитать какие были комментарии.
#
# 3.1) Где брать ссылку на коммит? куда её отправлять? (4:00-4:24)
# в history видим, что мы отправили коммит, заходим в view in github открывается github И СВЕРХУ В БРАУЗЕРЕ ЗАБИРАЕМ ССЫЛКУ НА КОММИТ и отправляем ссылку в чат телеграма (коммит отдал и ссылку на коммит)
#
# 4) Что такое файл лога? (1:12 - 2:28)
# его нужно заполнять в конце каждого урока, в нем дата урока и что мы запомнили в течение урока
#
# 4.1) Когда нужно его пушить? (12:31)
# После коммита, когда видим, что коммит прошел и когда все ошибки были исправлены
#
#
# 5) Что такое интерпритатор? (2:50-2:51)
# Это программа, которая читает и запускает наш код.
#
# 6) Где можно выбрать интерпритатор?(2:51 - 3:04)
# в верхней панели выбираем python environment (выбираем anaconda), либо на кнопку в правом верхнем углу (base(Python))
#
# 7) Что такое модуль? (8:49)
# Это обычный файлик .py или .ipynb
#
# 8) Как создать и отправить коммит? (03:28-04:00)
# заходим в гитхаб, видим что кошка отреагировала на наши изменения, она отображает все в формате json.
# Пишем название коммита (пишем что сделали) нажимаем commit to main и делаем push origin.
#
# 9) Как посмотреть что коммит точно отправлен и находится в github? (3:50)
# Смотрим в хистори, нажимаем правой кнопкой на историю, делаем view на github
# Если нет ошибки при нажатии на кнопку commit to main
#
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# commit to main
#
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# pylint
#
# 11) Как узнать какой именно линтер не прошёл проверку? (6:29)
# напротив него будет красный цвет и написано Failed
#
# 12) Линтер Pylint видит markdown? (7:08)
# нет не видит
#
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае? (7:27)
# Может отличаться, если есть ячейки markdown, поскольку линтер их не видит.
#
# 14) Где посмотреть номер ячейки в vscode? (6:45)
# в нижнем правом углу
#
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON? (03:50)
# в формате json
#
# 16) Где посмотреть в какой ячейке ошибка? (5:16 - 5:52)
# во всплывающем окне видно имя секции (имя линтера) с ошибкой и номер ячейки (cell), а также номер ошибки.
# можно также посмотреть по коду ошибки, либо, нажав ctrl+f, попытаться найти ошибку по поиску
#
# 17) Как запустить терминал? (5:53)
# в VScode наверху есть кнопка terminal - new terminal
#
# 18) Что такое линтер? (6:16)
# Линтер - это та программа, которая проверяет ваш файл на корректность.
#
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint? (08:18)
# на сайт Pylint вбиваем код ошибки
#
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере? (10:07)
# Автоматически закрывается, когда закрыты ошибки по pylint
#
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле? (09:30-09:40)
# Это в первой ячейке комментарий о том, что именно находится в модуле, какая в нем информация.
#
#
# 21.1) С какой  git команды начинается утро программиста? - git pull
#
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки? 14:20
# В кошке нажимам на свой репозиторий, нажимаем правой кнопкой мыши и там нажимаем на кнопку "open in VS code"
#
# 23) Что такое stash? 15:23
#   Общее объяснение концепции.
# В случае работы над одним файлом, когда изменения внесены и извне и локально, то Stash помогает сохранить локальные изменения в буфер обмена и в это время принимаются изменения из интернета, затем можно принять отдельно локальные изменения, и внешние, или и те и те.
#
#
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531): git stash
#
#   Кнопка в vs code:
# stash
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?: d VS code нажимаем restore, не discard - иначе можно потерять сохраненный стэш.
#
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?: git stash apply
#
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531): git stash list
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531): git stash drop - для одного
# 	git stash clear - чтобы все стеши удалить
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
# Работаем в одном файле, одновременно вносим с напарником изменения в файл, и когда мы принимаем внешние изменения без сохранения локальных изменений принять внешние невозможно.
#
# 24) Где посмотреть что есть конфликт в файлах? - в кошке на файле появляется знак конфликта. Нажимаем и переходим в VS code
#
# 24.1) Когда он появляется? Когда изменения в файл внесли одновременно и в GitHub и локально.
#
# 25) Как решить конфликт в файлах? Stash, затем решить какие изменения оставить - внешние (accept incoming change) или локальные (accept current change), либо и те и те (accept both changes).
#
# 26) Напишите правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
#
# Зеленое - гитхаб, синее - локальное
#
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? Да, можно
#
# 27.1) Что может произойти когда stash восстановите после принятия pull? может привести к конфликтам которые нужно будет разрешать вручную.
#
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# 3.      1) Принять текущую версию,
# 	2)принять входящую версию,
# 	3) принять оба изменения
#
# 29) Что делает кнопка complete merge?
# После того, как изменения разрешены - в git нажимаем эту кнопку, чтобы зафиксировать результат  и подтвердить, что больше нет конфликтов.
#
# 30) В какой чат нужно писать если остались вопросы? - HELP ME
#
# 31) Что такое FORK? Зачем его делают? - операция для копирования репозитория себе и для того, чтобы сделать его личным
#
# 32) Как скачать форкнутый репозиторий на локальный компьютер? - в кошке нажимаем clone repository из вспылвающего списка
#
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил? - 90%, решены Русланом или студентами
#
# 34) Как создать файл в vs code? - file - new file, либо нажав на значок new file
#
# 35) Файл лога нужно заполнять в конце каждого урока? - да
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527 - jupytext --to py *.ipynb
#
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# Пакетный менеджер - утилита для работы с библиотеками - их установки, обновления, удаления. Использую conda.
# для DS лучше conda т.к. в ней уже есть все необходимые для этого библиотеки и их больше.
#
#
# 3) Почему расширение py лучше чем ipynb?
# внутри ipynb - JSON - не особо читается в GIT.
# также в py легче прогоняются линтеры
#
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/ - - руководство по написанию кода python
#
# 4.1) линтеры проверяют на соблюдение pep8? - да, линтер Black
#
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# snake_case, camelCase, PascalCase
#
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ? - да, может, в качестве place holder.
#
# 4.4) Зачем и где мы используем андерскор _ - в мн
# - игнорирование значения в циклах или распаковке,
# -сохранение результата последнего выражения в интерактивной оболочке,
# -i18n/локализация
# -разделитель разрядов в числах,
# -часть имён (например, _var, __var, __init__).
#
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676 - да, допустимо, но просят избегать I,o,l чтобы не путались с цифрами

# quiz2
#
# 1. Как включить автосохранение данных в VSCODE? - file - Auto Save
#
# 2. Как настроить перенос строки?
# File - Preferences - Settings - wrap - wordWrapColumn - 79
#
# 3. Сколько символов по pep8 разрешено на строке? - 79
#
# 4. Какие способы переноса строк показаны в видео:
# -комментарии переносим с помощью # перед каждой строкой
# -ставим круглые скобки и переносим код
# -для str - разбиваем на несколько переменных, затем конкатенируем
#
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# слева от терминала. Показывает какие линтеры жалуются, также есть ссылка на сайт, где показан корректный код.
#
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# Иконка ветки. Принять домашку с помощью pull, submit changes - commit.
#
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту? Git - это контроль версий. Можно отследить изменения, которые были в файле.
#
# 8. Как вставить картинку в маркдаун? - ctrl+V и галка
#
# 9. Где посмотреть длину строки в vs code? - в ячейке python, в маркдауне не видно длины строки
#
# 10. Как поменять тип ячейки с питона на маркдаун? - справа внизу ячейки нажимаем на пайтон и меняем на маркдаун
#
# 11. Как запустить сразу все ячейки в юпитере? - Run All
#
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML? - нужно подучить теги, пишем <img саму картинку и прописываем размер
#
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# Shift+Enter
#
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# в верхнем правом углу … show cell line numbers - ставим галку
#
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# нажать на крестик Go to - перебрасывает на ошибочную ячейку в коде.
#
# 16. Как очистить вывод ячеек которые уже запущены?
# Нажимаем кнопку - Clear all outputs
#
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# Жмем в правом верхнем углу иконку split edit. Делит экран на несколько экранов - можно работать в нескольких файлах одновременно.
#
# 18. Каким сочетанием убирается левый сайдбар?
# Ctrl+B
#
# 19. Кнопка два листочка это наши локальные файлы? - да
#
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# DICT
#
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и  https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# Да
#
# 22. Что такое валидация?
# Проверка кода на его правильность.
#
# 23. Что такое трассировка ошибки?
# Это сообщение об ошибке (Traceback)
#
# 24. Что значит отвалился интерпритатор?
# Значит, что когда запускали код Run all на каком-то этапе код перестал запускаться из-за ошибки в какой-то части кода.
#
#
